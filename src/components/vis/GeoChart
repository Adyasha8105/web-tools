import React from 'react';
import d3 from 'd3';
import d3LayoutCloud from 'd3-cloud';

class GeoChart extends React.Component {

  getConfig() {
    var config = {
      chart: {
        spacingBottom: 20,
      },
      title: {
        text: 'Europe time zones',
      },

      legend: {
        enabled: true,
      },

      plotOptions: {
        map: {
          allAreas: false,
          joinBy: ['iso-a2', 'code'],
          dataLabels: {
            enabled: true,
            color: 'white',
            style: {
              fontWeight: 'bold',
            },
          },
          mapData: maps,
          tooltip: {
            headerFormat: '',
            pointFormat: '{point.name}: <b>{series.name}</b>',
          },

        },
      },
    };
  }

  render() {
    const { geo  } = this.props;
    const config = this.getConfig();

    let mapInfo = {};
    mapInfo.width = 720;
    mapInfo.height = this.mapInfo.width / 2.19;
    mapInfo.scale = this.mapInfo.width / 5.18;
    mapInfo.offset = [this.mapInfo.width / 1.96, this.mapInfo.height / 1.73];
    mapInfo.projection = d3.geo.kavrayskiy7()
                    .scale(this.mapInfo.scale)
                    .translate([this.mapInfo.offset[0], this.mapInfo.offset[1]])
                    .precision(0.1);
    mapInfo.path = d3.geo.path()
                    .projection(this.mapInfo.projection);
    mapInfo.disabledColor = 'rgb(220,220,200)';
    mapInfo.maxCount = _.max(geoData, function(item) { return item.count} ).count;
        // complicated scale setup to make log chloropleth work
    mapInfo.scale1 = d3.scale.linear()
            .domain([0, mapInfo.maxCount]).range([1, 100]);
    mapInfo.scale2 = d3.scale.log()
            .domain([1, 100]).range([0.1, 0.9]);
    mapInfo.scale3 = d3.scale.linear()
            .domain([0, 0.17, 0.34, 0.51, 0.68, 0.85, 1]);
        // set up the polygon lookups
    mapInfo.countryPaths = topojson.feature(App.worldMap, App.worldMap.objects.countries).features;
    mapInfo.countryAlpha3ToPath = {};
        $.each(this.mapInfo.countryPaths, function (i, element) {
            if(element.id>0){
                that.mapInfo.countryAlpha3ToPath[ISO3166.getAlpha3FromId(element.id)] = element;
            }
        });

    return (
       { config }
    );
  }
}

GeoChart.propTypes = {
  data: React.PropTypes.array.isRequired,
  height: React.PropTypes.number.isRequired,
  title: React.PropTypes.string,
  yAxisLabel: React.PropTypes.string,
  health: React.PropTypes.array,
  onDataPointClick: React.PropTypes.func,
};

export default GeoChart;
